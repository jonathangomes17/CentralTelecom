#!/usr/bin/env php
<?php

declare(strict_types=1);

use Symfony\Component\Console\Application;
use Symfony\Component\Dotenv\Dotenv;
use Symfony\Component\EventDispatcher\EventDispatcher;
use App\Infrastructure\EventDispatcher as AbstractEventDispatcher;
use App\Infrastructure\Database;

date_default_timezone_set('America/Sao_Paulo');

define('APP_ROOT', dirname(__DIR__));

set_time_limit(0);

require_once __DIR__ . '/../vendor/autoload.php';

(new Dotenv)->overload(__DIR__ . '/../.env');

if ($_ENV['APP_ENV'] !== 'development') {
    Sentry\init(['dsn' => $_ENV['SENTRY_DSN'],'environment' => $_ENV['APP_ENV']]);
}

$commandLoader = require __DIR__ . '/../config/commands.php';
$subscribers = require __DIR__ . '/../config/subscribers.php';

$dispatcher = new EventDispatcher;

array_map(
    function ($subscriber) use ($dispatcher) {
        $dispatcher->addSubscriber(new $subscriber);
    },
    $subscribers
);

$application = new Application('My App', '1.0.0');
$application->setCommandLoader($commandLoader);
$application->setDispatcher($dispatcher);
$application->setAutoExit(false);
$application->setCatchExceptions(false);

try {
    Database::connection();

    $application->run();

    foreach (AbstractEventDispatcher::getEvents() as $eventName => $event) {
        try {
            $dispatcher->dispatch($event, $eventName);
        } catch (Throwable $e) {
            if ($_ENV['APP_ENV'] !== 'development') {
                Sentry\captureException($e);
            } else {
                echo $e->getMessage() . "\n";
            }

            // TODO: Gravar na tabela de eventos para que seja reprocessado novamente
            // Avaliar se não é necessário salvar a cadeira de eventos ou um apenas
        }
    }
} catch (Throwable $e) {
    if ($_ENV['APP_ENV'] !== 'development') {
        Sentry\captureException($e);
    } else {
        echo $e->getMessage() . "\n";
    }
}
